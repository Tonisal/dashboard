{"version":3,"sources":["components/TaskList/templates/AddNewTaskForm.js","svg/arrow.svg","components/TaskList/templates/TaskListItem.js","components/TaskList/templates/TaskList.js","components/TaskList/Tasks.js","components/CheckList.js","components/MainNavigation.js","components/Dummy.js","components/Kackundsach.js","App.js","serviceWorker.js","index.js"],"names":["AddNewTaskForm","state","inputValueTaskName","inputValueDescription","inputValueType","inputValueDate","inputValueTime","inputValueTaskPerodical","handleNewTaskSave","e","preventDefault","taskToAdd","taskName","taskDescription","taskType","taskDate","taskTime","props","addingTaskToList","setState","handleInputValueChange","target","id","value","console","log","test","Date","setDate","getDate","parseInt","Accordion","className","Card","Toggle","as","Header","eventKey","Collapse","Body","onSubmit","this","InputGroup","Prepend","Text","FormControl","type","onChange","required","htmlFor","name","defaultChecked","Button","variant","length","data-test","React","Component","_extends","Object","assign","i","arguments","source","key","prototype","hasOwnProperty","call","apply","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","createElement","d","fill","_ref","svgRef","title","viewBox","ref","ForwardRef","forwardRef","TaskListItem","inputNameChangeValue","handleTaskNameChange","saveTaskNameChange","taskToChange","getAttribute","newTaskName","changeTaskName","inputChangeTaskName","ListGroup","Item","Form","Control","taskattr","data-task","task","defaultValue","taskToDelete","deleteTask","aria-label","Append","TaskList","tasksMarkup","pushDeletedTaskToAppState","taskToDeleteFromAppState","pushChangeTaskNameToAppState","tasks","map","headline","Tasks","getTasksFromServer","a","axios","get","res","data","post","status","push","Container","filter","Row","Col","xs","CheckList","listInputValue","itemInputValue","listToShow","lists","getChecklistsFromServer","handleTextInputChange","text","handleCheckboxInputChange","list","item","itemStatus","checked","ii","items","itemName","handleFormSubmit","listToAdd","existinglists","currentList","itemToAdd","itemToDelete","listItem","listToDelete","splice","itemsToShow","listsmarkup","data-target","checklistmarkup","placeholder","uncheckAllCheckboxes","MainNavigation","Navbar","bg","fixed","Brand","href","Nav","Link","Dummy","users","getDataFromAPI","dataObj","localStorage","setItem","JSON","stringify","handleConnectionError","err","message","parse","getItem","user","email","Kackundsach","getPodcast","parser","DOMParser","xmlDoc","parseFromString","xml2js","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e5c5d692.chunk.js","sourcesContent":["import React from 'react';\nimport {\n    Card,\n    Button,\n    InputGroup,\n    FormControl,\n    Accordion,\n} from \"react-bootstrap\";\n\n\nclass AddNewTaskForm extends React.Component {\n\n    state = {\n        inputValueTaskName: '',\n        inputValueDescription: '',\n        inputValueType: 'taskWithoutDate',\n        inputValueDate: '',\n        inputValueTime: '',\n        inputValueTaskPerodical: false\n    }\n\n    handleNewTaskSave = (e) => {\n        e.preventDefault();\n        const taskToAdd = {\n            taskName: this.state.inputValueTaskName,\n            taskDescription: this.state.inputValueDescription,\n            taskType: this.state.inputValueType,\n            taskDate: this.state.inputValueDate,\n            taskTime: this.state.inputValueTime,\n        };\n        this.props.addingTaskToList(taskToAdd);\n        this.setState({\n            inputValueTaskName: '',\n            inputValueType: 'taskWithoutDate',\n            inputValueDescription: '',\n            inputValueDate: '',\n        });\n    };\n\n    handleInputValueChange = (e) => {\n        if (e.target.id === 'taskName') {\n            this.setState({\n                inputValueTaskName: e.target.value\n            });\n        } else if (e.target.id === 'taskDescription') {\n            this.setState({\n                inputValueDescription: e.target.value\n            });\n        } else if (e.target.id === 'taskDate') {\n            console.log(e.target.value);\n            let test = new Date(e.target.value);\n            test.setDate(test.getDate()+parseInt(28));\n            console.log(test);\n            this.setState({\n                inputValueDate: e.target.value\n            });\n        } else if (e.target.id === 'taskTime') {\n            this.setState({\n                inputValueTime: e.target.value\n            });\n        } else if (e.target.id === 'taskPeriodicalYes') {\n            this.setState({\n                inputValueTaskPerodical: true\n            });\n        } else if (e.target.id === 'taskPeriodicalNo') {\n            this.setState({\n                inputValueTaskPerodical: false\n            });\n        } else {\n            this.setState({\n                inputValueType: e.target.id\n            });\n        }\n    };\n\n\n    render() {\n        return (\n            <Accordion className=\"addNewTaskForm mb-3\">\n                <Card className=\"shadow-none\">\n                    <Accordion.Toggle as={Card.Header} eventKey=\"0\" className=\"text-center cursor-pointer\">\n                        Task hinzufügen\n                    </Accordion.Toggle>\n                    <Accordion.Collapse eventKey=\"0\">\n                        <Card.Body>\n                            <form className='addTask' onSubmit={this.handleNewTaskSave}>\n                                <div>\n                                    <InputGroup className=\"mb-3\">\n                                        <InputGroup.Prepend>\n                                            <InputGroup.Text id=\"basic-addon1\">Task Name</InputGroup.Text>\n                                        </InputGroup.Prepend>\n                                        <FormControl value={this.state.inputValueTaskName} id='taskName' type='text'\n                                                     onChange={this.handleInputValueChange} required/>\n                                    </InputGroup>\n                                    <InputGroup className=\"mb-3\">\n                                        <InputGroup.Prepend>\n                                            <InputGroup.Text>Beschreibung</InputGroup.Text>\n                                        </InputGroup.Prepend>\n                                        <FormControl as=\"textarea\" id='taskDescription'\n                                                     value={this.state.inputValueDescription}\n                                                     onChange={this.handleInputValueChange}/>\n                                    </InputGroup>\n                                    <div className=\"eventTypeContainer mb-3 d-flex\">\n                                        <Card className=\"mr-1\">\n                                            <Card.Body as=\"label\" htmlFor='taskWithoutDate'>\n                                                <span className=\"mr-2\">Ohne Deadline</span>\n                                                <input id='taskWithoutDate' onChange={this.handleInputValueChange}\n                                                       type='radio'\n                                                       name='taskEventOrDeadline'\n                                                       defaultChecked\n                                                />\n                                            </Card.Body>\n                                        </Card>\n                                        <Card className=\"ml-1\">\n                                            <Card.Body as=\"label\" htmlFor='taskDeadline'>\n                                                <span className=\"mr-2\">Mit Deadline</span>\n                                                <input id='taskDeadline' onChange={this.handleInputValueChange}\n                                                       type='radio'\n                                                       name='taskEventOrDeadline'/>\n                                            </Card.Body>\n                                        </Card>\n                                    </div>\n                                </div>\n                                {this.state.inputValueType !== 'taskWithoutDate' ?\n                                    <div className=\"tasks_date mb-3 d-flex\">\n                                        <InputGroup className=\"mr-1\">\n                                            <InputGroup.Prepend>\n                                                <InputGroup.Text id=\"basic-addon1\">Datum</InputGroup.Text>\n                                            </InputGroup.Prepend>\n                                            <FormControl id=\"taskDate\" type=\"date\"\n                                                         onChange={this.handleInputValueChange} required/>\n                                        </InputGroup>\n                                        <InputGroup className=\"ml-1\">\n                                            <InputGroup.Prepend>\n                                                <InputGroup.Text id=\"basic-addon1\">Uhrzeit</InputGroup.Text>\n                                            </InputGroup.Prepend>\n                                            <FormControl id=\"taskTime\" type=\"time\"\n                                                         onChange={this.handleInputValueChange} required/>\n                                        </InputGroup>\n                                    </div> : ''}\n                                <Button variant=\"success\" type=\"submit\" className={this.state.inputValueTaskName.length > 0 ? '' : 'disabled'}\n                                                                         data-test={this.state.inputValueTaskName.length}>Task\n                                    hinzufügen</Button>\n                            </form>\n                        </Card.Body>\n                    </Accordion.Collapse>\n                </Card>\n            </Accordion>\n        )\n    }\n}\n\nexport default AddNewTaskForm;\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M0 0h24v24H0V0z\",\n  fill: \"none\"\n});\n\nvar _ref3 = /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M7.41 8.59L12 13.17l4.59-4.58L18 10l-6 6-6-6 1.41-1.41z\"\n});\n\nvar SvgArrow = function SvgArrow(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    viewBox: \"0 0 24 24\",\n    ref: svgRef\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _ref2, _ref3);\n};\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(SvgArrow, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/arrow.bb05e131.svg\";\nexport { ForwardRef as ReactComponent };","import React from 'react';\nimport {\n    Card,\n    ListGroup,\n    Button,\n    Form,\n    InputGroup,\n    Accordion,\n    Textarea,\n    FormControl\n} from \"react-bootstrap\";\n\nimport {ReactComponent as Arrow} from '../../../svg/arrow.svg';\n\nclass TaskListItem extends React.Component {\n    state = {\n        inputNameChangeValue: '',\n    }\n\n    handleTaskNameChange = (e) => {\n        this.setState({\n            inputNameChangeValue: e.target.value\n        });\n    };\n\n    saveTaskNameChange = (e) => {\n        e.preventDefault();\n        const taskToChange = e.target.getAttribute('data-task');\n        const newTaskName = this.state.inputNameChangeValue;\n\n        if (newTaskName.length) {\n            this.props.changeTaskName(taskToChange, newTaskName);\n            this.setState({\n                inputChangeTaskName: '',\n            });\n        }\n    };\n\n    render() {\n        const deleteTask = (e) => {\n            e.preventDefault();\n            const taskToDelete = e.target.getAttribute('data-task');\n            this.props.deleteTask(taskToDelete);\n        };\n\n        return (\n            <Accordion className=\"taskListItem\">\n                <ListGroup.Item className=\"\">\n                    <div className=\"d-flex items-center justify-content-between\">\n                        <InputGroup className=\"w-50 position-relative\">\n                            <Form.Control id=\"changeTaskName\" taskattr='taskName' data-task={this.props.task.taskName}\n                                          defaultValue={this.props.task.taskName} onChange={this.handleTaskNameChange}\n                                          className=\"border-0\"/>\n                            <form className=\"position-absolute right\" data-task={this.props.task.taskName}\n                                  onSubmit={this.saveTaskNameChange}>\n                                <Button variant=\"link\" className=\"taskListItem__saveButton\"\n                                        type=\"submit\">speichern</Button>\n                            </form>\n                        </InputGroup>\n                        <Accordion.Toggle as=\"div\" eventKey={this.props.task.taskName}>\n                            {this.props.task.taskDescription ? <Arrow className=\"accordion__toggle\"/> :\n                                <Button variant=\"secondary\">Beschreibung hinzufügen</Button>}\n                        </Accordion.Toggle>\n                        <form data-task={this.props.task.taskName} onSubmit={deleteTask}>\n                            <Button className=\"ml-auto\" variant=\"danger\" type=\"submit\">Löschen</Button>\n                        </form>\n                    </div>\n                </ListGroup.Item>\n                <Accordion.Collapse eventKey={this.props.task.taskName}>\n                    <Card className=\"border-top-0\">\n                        <Card.Body className=\"pl-4\">\n                            <InputGroup>\n                                <FormControl as=\"textarea\" aria-label=\"With textarea\">{this.props.task.taskDescription}</FormControl>\n                                <InputGroup.Append>\n                                    <Button variant=\"success\">speichern</Button>\n                                </InputGroup.Append>\n                            </InputGroup>\n                        </Card.Body>\n                    </Card>\n                </Accordion.Collapse>\n            </Accordion>\n        )\n    }\n};\n\nexport default TaskListItem;\n","import React from 'react';\nimport {Card, ListGroup} from \"react-bootstrap\";\nimport TaskListItem from \"./TaskListItem\";\n\n\nconst TaskList = (props) => {\n    const pushDeletedTaskToAppState = (taskToDeleteFromAppState) => {\n        props.deleteTask(taskToDeleteFromAppState);\n    };\n\n    const pushChangeTaskNameToAppState = (taskToChange, newTaskName) => {\n        props.changeTaskName(taskToChange, newTaskName);\n    };\n\n    let tasks = props.tasks;\n    let tasksMarkup;\n    tasksMarkup = props.tasks.map(task =>\n        <TaskListItem key={task.taskName} task={task} deleteTask={pushDeletedTaskToAppState}\n                      changeTaskName={pushChangeTaskNameToAppState}/>\n    );\n\n    if (tasks.length === 0) {\n        tasksMarkup = <h2>Keine Einträge vorhanden</h2>;\n    }\n\n\n    return (\n        <Card className=\"taskList flex-grow-1 mb-5\">\n            <Card.Header className=\"text-center\">{props.headline}</Card.Header>\n            <Card.Body>\n                <ListGroup>\n                    {tasksMarkup}\n                </ListGroup>\n            </Card.Body>\n        </Card>\n    )\n};\n\nexport default TaskList;\n","import React, {Component} from 'react';\nimport {Container, Row, Col} from \"react-bootstrap\";\n\nimport AddNewTaskForm from \"./templates/AddNewTaskForm\";\nimport TaskList from \"./templates/TaskList\";\nimport axios from 'axios';\n\nclass Tasks extends Component {\n    state = {\n        tasks: [],\n    };\n\n    /*Get Saved tasks from localStorage after reload/visit */\n    componentDidMount() {\n        this.getTasksFromServer();\n    }\n\n    getTasksFromServer = async () => {\n        console.log('get');\n        const res = await axios.get(`http://localhost:3020/tasks`);\n        const data = res.data;\n        this.setState({\n            tasks: data.tasks,\n        })\n    };\n\n\n    addingTaskToList = async (taskToAdd) => {\n        const result = await axios.post(`http://localhost:3020/addTask`, {taskToAdd});\n        if (result.status === 200) {\n            let tasks = this.state.tasks;\n            tasks.push(taskToAdd);\n            this.setState({\n                tasks: tasks\n            })\n        }\n    };\n\n    deleteTask = async (taskToDelete) => {\n        console.log(taskToDelete);\n        const result = await axios.post(`http://localhost:3020/deleteTask`, {taskToDelete});\n\n        if (result.status === 200) {\n            await this.getTasksFromServer();\n        }\n\n    };\n\n    changeTaskName = async (taskToChange, newTaskName) => {\n        console.log(taskToChange, newTaskName);\n        const result = await axios.post(`http://localhost:3020/changeTaskName`, {taskToChange, newTaskName});\n        if (result.status === 200) {\n            console.log('send');\n        }\n    };\n\n    render() {\n        return (\n            <Container className=\"tasks pt-5\">\n                <AddNewTaskForm addingTaskToList={this.addingTaskToList}/>\n                <hr className=\"mb-5\"/>\n                <TaskList headline=\"Tasks ohne festes Datum\"\n                          tasks={this.state.tasks.filter(task => task.taskType === \"taskWithoutDate\")}\n                          deleteTask={this.deleteTask} changeTaskName={this.changeTaskName}/>\n                <Row>\n                    <Col xs={6}>\n                        <TaskList headline=\"Tasks mit Deadline heute\"\n                                  tasks={this.state.tasks.filter(task => task.taskType === \"taskDeadline\")}\n                                  deleteTask={this.deleteTask} changeTaskName={this.changeTaskName}/>\n                    </Col>\n                    <Col xs={6}>\n                        <TaskList headline=\"Tasks mit Deadline 7 Tage\"\n                                  tasks={this.state.tasks.filter(task => task.taskType === \"taskDeadline\")}\n                                  deleteTask={this.deleteTask} changeTaskName={this.changeTaskName}/>\n                    </Col>\n                </Row>\n\n            </Container>\n        )\n    };\n}\n\nexport default Tasks;\n","import React, {Component} from 'react';\n\nimport {\n    Button,\n    InputGroup,\n    FormControl,\n    ListGroup,\n    Container,\n    Card\n} from \"react-bootstrap\";\nimport axios from \"axios\";\n\nclass CheckList extends Component {\n    state = {\n        listInputValue: '',\n        itemInputValue: '',\n        listToShow: '',\n        lists: [],\n    };\n\n    componentDidMount() {\n        this.getChecklistsFromServer();\n    }\n\n    getChecklistsFromServer = async () => {\n        console.log('get');\n        const res = await axios.get(`http://localhost:3020/checklists`);\n        const data = res.data.lists;\n       this.setState({\n           lists: data,\n           listToShow: data[0].name,\n       })\n    };\n\n    handleTextInputChange = (e) => {\n        const text = e.target.value;\n        const target = e.target.getAttribute('data-target');\n\n        this.setState({\n            [target]: text,\n        });\n    };\n\n    handleCheckboxInputChange = (e) => {\n        const lists = this.state.lists;\n        const list = this.state.listToShow;\n        const item = e.target.getAttribute('item');\n        const itemStatus = e.target.checked;\n\n        for (let i = 0; i < lists.length; i++) {\n            if (lists[i].name === list) {\n                for (let ii = 0; ii < lists[i].items.length; ii++) {\n                    if (lists[i].items[ii].itemName === item) {\n                        lists[i].items[ii].checked = itemStatus;\n                    }\n                }\n            }\n        }\n\n        this.setState({\n            lists: lists,\n        });\n    }\n\n    handleFormSubmit = (e) => {\n        e.preventDefault();\n        const target = e.target.getAttribute('data-target');\n\n        // Submit new List\n        if (target === 'addList') {\n\n            // Check if list does already exists\n            let listToAdd = this.state.listInputValue;\n            let existinglists = this.state.lists;\n\n            for (let i = 0; i < existinglists.length; i++) {\n                if (existinglists[i].name === listToAdd) {\n                    return;\n                }\n            }\n\n            listToAdd = {\n                name: listToAdd,\n                items: [],\n            }\n\n            existinglists.push(listToAdd);\n\n            this.setState({\n                lists: existinglists,\n                listInputValue: '',\n\n            });\n        }\n\n        // Select existing list to show items\n        else if (target === 'selectList') {\n            let listToShow = e.target.getAttribute('list');\n            this.setState({\n                listToShow: listToShow,\n            });\n        }\n\n        // Add item to list\n        else if (target === 'addItem') {\n            console.log('hi');\n            const lists = this.state.lists;\n            const currentList = this.state.listToShow;\n            let itemToAdd = {\n                itemName: this.state.itemInputValue,\n                checked: false\n            };\n\n            for (let i = 0; i < lists.length; i++) {\n                if (lists[i].name === currentList) {\n                    lists[i].items.push(itemToAdd);\n                }\n            }\n\n            this.setState({\n                lists: lists,\n                itemInputValue: ''\n            })\n        }\n\n        // Delete Item from List which is currently shown\n        else if (target === 'deleteItem') {\n            const lists = this.state.lists;\n            const currentList = this.state.listToShow;\n            const itemToDelete = e.target.getAttribute('item');\n\n            for (let i = 0; i < lists.length; i++) {\n                if (lists[i].name === currentList) {\n                    lists[i].items = lists[i].items.filter(listItem => listItem.itemName !== itemToDelete);\n                }\n            }\n\n            this.setState({\n                lists: lists,\n            });\n        }\n\n        // Delete List\n        else if (target === 'deleteList') {\n            const lists = this.state.lists;\n            const listToDelete = e.target.getAttribute('list');\n\n            for (let i = 0; i < lists.length; i++) {\n                if (lists[i].name === listToDelete) {\n                    lists.splice([i], 1);\n                }\n            }\n\n            this.setState({\n                lists: lists,\n            });\n        }\n    };\n\n    render() {\n        let lists = this.state.lists;\n        let listToShow = this.state.listToShow;\n        let itemsToShow = [];\n\n        // Show all existing Lists\n        let listsmarkup = lists.map(list =>\n            <li className=\"position-relative mr-3\" key={list.name}>\n                <form onSubmit={this.handleFormSubmit} data-target=\"selectList\" list={list.name}>\n                    <Button variant=\"primary\" type=\"submit\">{list.name}</Button>\n                </form>\n                <form onSubmit={this.handleFormSubmit} data-target=\"deleteList\" list={list.name}>\n                    <button className=\"checklist__delete-list-button\" type=\"submit\">\n                        X\n                    </button>\n                </form>\n            </li>\n        );\n\n        if (!lists.length) {\n            listsmarkup = <li><h2 className=\"mb-0 text-center\">Keine Listen vorhanden</h2></li>;\n        }\n\n\n        //Show all items of a list\n\n        for (let i = 0; i < lists.length; i++) {\n            if (lists[i].name === listToShow) {\n                itemsToShow = lists[i].items;\n            }\n        }\n\n        let checklistmarkup = itemsToShow.map(item =>\n            <ListGroup.Item key={item.itemName} className=\"checklist__item\">\n                <input id={item.itemName} item={item.itemName} type=\"checkbox\" onChange={this.handleCheckboxInputChange}\n                       checked={item.checked}/>\n                <label htmlFor={item.itemName}>{item.itemName}</label>\n                <form item={item.itemName} data-target=\"deleteItem\" onSubmit={this.handleFormSubmit}>\n                    <Button variant=\"secondary\" type=\"submit\">Löschen</Button>\n                </form>\n            </ListGroup.Item>\n        );\n\n        return (\n            <Container className=\"checklist pt-5\">\n                <Card className=\"checklist__addList mb-5\">\n                    <Card.Header className=\"text-center\">Checklisten - Übersicht</Card.Header>\n                    <Card.Body>\n                        <form onSubmit={this.handleFormSubmit} data-target=\"addList\">\n                            <InputGroup className=\"mb-3\">\n                                <FormControl placeholder=\"Füge Liste hinzu\" type=\"text\"\n                                             onChange={this.handleTextInputChange}\n                                             data-target=\"listInputValue\"\n                                             value={this.state.listInputValue}/>\n                                <InputGroup.Append>\n                                    <Button variant=\"success\" type=\"submit\">Button</Button>\n                                </InputGroup.Append>\n                            </InputGroup>\n                        </form>\n                        <ul className=\"checklist__showLists mb-0\">\n                            {listsmarkup}\n                        </ul>\n                    </Card.Body>\n                </Card>\n                <div className=\"d-flex mb-3\">\n                    <form onSubmit={this.uncheckAllCheckboxes}>\n                        <Button className=\"mr-3\" variant=\"danger\">Alles abwählen</Button>\n                    </form>\n\n                    <div className=\"checklist__addItem flex-grow-1\">\n                        <form data-target=\"addItem\" onSubmit={this.handleFormSubmit}>\n                            <InputGroup>\n                                <FormControl placeholder=\"Füge Item hinzu\" type=\"text\" data-target=\"itemInputValue\"\n                                             onChange={this.handleTextInputChange}\n                                             value={this.state.itemInputValue}\n                                />\n                                <InputGroup.Append>\n                                    <Button variant=\"success\" type=\"submit\">Button</Button>\n                                </InputGroup.Append>\n                            </InputGroup>\n                        </form>\n                    </div>\n                </div>\n                <ListGroup>\n                    {checklistmarkup}\n                </ListGroup>\n            </Container>\n        )\n    }\n}\n\nexport default CheckList;","import React from 'react';\nimport {Nav, Navbar, Container} from 'react-bootstrap';\n\nconst MainNavigation = () => {\n    return (\n        <div>\n            <Navbar bg=\"dark\" variant=\"dark\" fixed=\"top\">\n                <Container>\n                    <Navbar.Brand href=\"/\">Dashboard</Navbar.Brand>\n                    <Nav className=\"mr-auto\">\n                        <Nav.Link href=\"./tasklist\">Offene Tasks</Nav.Link>\n                        <Nav.Link href=\"./checklist\">Checklisten</Nav.Link>\n                        <Nav.Link href=\"./kackundsach\">Kack</Nav.Link>\n                        <Nav.Link href=\"./dummy\">Dummy</Nav.Link>\n                    </Nav>\n                </Container>\n            </Navbar>\n        </div>\n    )\n}\n\nexport default MainNavigation;","import React from \"react\";\nimport axios from \"axios\";\n\nimport { Card } from \"react-bootstrap\";\n\nclass Dummy extends React.Component {\n    state = {\n        users: [],\n    }\n\n    componentDidMount() {\n        this.getDataFromAPI();\n    }\n\n    getDataFromAPI = async () => {\n        let res;\n        try {\n            res = await axios.get(`https://jsonplaceholder.typicode.com/users`);\n            console.log(res.data);\n            const dataObj = {'data': res.data};\n            localStorage.setItem('users', JSON.stringify(dataObj));\n            this.setState({\n                users: res.data,\n            })\n        } catch(err) {\n            this.handleConnectionError(err);\n        }\n    }\n\n    handleConnectionError = (err) => {\n        if (err.message === 'Network Error') {\n            console.log('Network Error');\n            const data = JSON.parse(localStorage.getItem('users'));\n            this.setState({\n                users: data.data,\n            })\n            console.log(data);\n        }\n\n    }\n\n\n\n\n    render() {\n        return (\n            <div className=\"pt-5\">\n                <h1>hello world dummy</h1>\n                {this.state.users.map(user =>\n                    <Card>\n                        <Card.Header className=\"text-center\">{user.name}</Card.Header>\n                        <Card.Body>\n                            <ul>\n                                <li>{user.email}</li>\n                            </ul>\n                        </Card.Body>\n                    </Card>\n                )}\n            </div>\n        )\n    }\n}\n\nexport default Dummy;","import React from \"react\";\nimport axios from \"axios\";\nimport * as  xml2js from 'xml2js';\n\nclass Kackundsach extends React.Component {\n\n\n    componentDidMount() {\n        this.getPodcast();\n    }\n\n    getPodcast = async() => {\n        const res = await axios.get(`https://steadyhq.com/rss/kackundsach?auth=c48439e3-2c6b-4507-af4d-b57d22b8c870`);\n\n        let parser = new DOMParser();\n        let xmlDoc = parser.parseFromString(res.data,\"text/xml\");\n        console.log(xmlDoc);\n    };\n\n    render() {\n        var test = xml2js();\n\n        return (\n            <div>\n                <h1>Kack und Sach</h1>\n            </div>\n        )\n    }\n}\n\nexport default Kackundsach;","import React from 'react';\n\nimport './css/style.scss';\n\nimport Tasks from \"./components/TaskList/Tasks\";\nimport CheckList from './components/CheckList';\nimport MainNavigation from \"./components/MainNavigation\";\nimport Dummy from \"./components/Dummy\";\n\nimport {\n    BrowserRouter, Route, Switch\n} from 'react-router-dom';\nimport Kackundsach from \"./components/Kackundsach\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <MainNavigation/>\n            <main className=\"pt-5\">\n                    <BrowserRouter>\n                        <Switch>\n                            <Route exact path=\"/\">\n                            </Route>\n                            <Route path=\"./checklist\">\n                                <CheckList/>\n                            </Route>\n                            <Route path=\"./tasklist\">\n                                <Tasks/>\n                            </Route>\n                            <Route path=\"./kackundsach\">\n                                <Kackundsach/>\n                            </Route>\n                            <Route path=\"./dummy\">\n                                <Dummy/>\n                            </Route>\n                        </Switch>\n                    </BrowserRouter>\n            </main>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}